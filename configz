#!/usr/bin/env bash

# Configz - Modern Configuration Management CLI
# Version: 0.2.0-alpha
# Author: Your Name

set -euo pipefail

# =============================================================================
# GLOBALS AND CONFIGURATION
# =============================================================================

# Get script directory and project root
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CLI_DIR="$SCRIPT_DIR/cli"
CONFIG_SOURCE_DIR="$HOME/.config/configz/modules"
TARGET_BASE_DIR="$HOME/.config"

# Version and metadata
VERSION="0.2.0-alpha"
PROGRAM_NAME="configz"

# Default options
VERBOSE=0
DRY_RUN=0
NO_BACKUP=0
FORCE=0
QUIET=0

# =============================================================================
# COLORS AND UTILITIES
# =============================================================================

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
BOLD='\033[1m'
DIM='\033[2m'
NC='\033[0m'

# Logging functions
log_error() {
    [[ $QUIET -eq 1 ]] && return
    echo -e "${RED}[ERROR]${NC} $*" >&2
}

log_warning() {
    [[ $QUIET -eq 1 ]] && return
    echo -e "${YELLOW}[WARNING]${NC} $*" >&2
}

log_info() {
    [[ $QUIET -eq 1 ]] && return
    echo -e "${BLUE}[INFO]${NC} $*"
}

log_success() {
    [[ $QUIET -eq 1 ]] && return
    echo -e "${GREEN}[SUCCESS]${NC} $*"
}

log_debug() {
    [[ $VERBOSE -eq 0 ]] && return
    echo -e "${DIM}[DEBUG]${NC} $*" >&2
}

# =============================================================================
# HELP AND USAGE
# =============================================================================

show_version() {
    cat << EOF
$PROGRAM_NAME version $VERSION

A modern, modular configuration management system.
https://github.com/yourusername/configz
EOF
}

show_help() {
    cat << EOF
$PROGRAM_NAME - Modern Configuration Management CLI

USAGE:
    $PROGRAM_NAME [OPTIONS] <COMMAND> [ARGS...]

VERSION:
    $VERSION (alpha - new CLI interface)

COMMANDS:
    install [MODULE...]     Install configuration modules
    list                    List available modules
    status                  Show installation status
    remove [MODULE...]      Remove installed modules
    backup [MODULE...]      Backup current configurations
    restore [MODULE...]     Restore from backup
    search <QUERY>          Search for modules
    update [MODULE...]      Update installed modules
    init <NAME>             Create a new module template
    info <MODULE>           Show detailed module information
    migrate [SOURCE_DIR]    Migrate modules to new directory structure
    doctor                  Check system health and dependencies

GLOBAL OPTIONS:
    -h, --help             Show this help message
    -V, --version          Show version information
    -v, --verbose          Enable verbose output
    -q, --quiet            Suppress non-error output
    -n, --dry-run          Show what would be done without executing
        --no-backup        Skip automatic backups
    -f, --force            Force operations without confirmation
        --config-dir DIR   Use custom config directory (default: ~/.config)

EXAMPLES:
    $PROGRAM_NAME list                    # List all available modules
    $PROGRAM_NAME install fish starship   # Install specific modules
    $PROGRAM_NAME install --no-backup     # Install without backups
    $PROGRAM_NAME status                  # Check what's installed
    $PROGRAM_NAME backup fish             # Backup fish configuration
    $PROGRAM_NAME info nvim               # Show nvim module details
    $PROGRAM_NAME doctor                  # Check system health

For more information about a specific command, use:
    $PROGRAM_NAME <COMMAND> --help

NOTE:
    This CLI interface is in alpha. The original interactive installer
    (./install.sh) remains stable and fully supported.

CONFIGURATION:
    Modules directory: $CONFIG_SOURCE_DIR
    Target directory: $TARGET_BASE_DIR
    Global config: ~/.config/configz/config.toml
    Backups: ~/.config/configz/backups/

    Each module can have an optional configz.toml file for advanced configuration.
    Run 'configz init' to create your first module.

EOF
}

# =============================================================================
# UTILITY FUNCTIONS
# =============================================================================

# Check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Load command library
load_command() {
    local command="$1"
    local command_file="$CLI_DIR/commands/$command.sh"

    if [[ -f "$command_file" ]]; then
        log_debug "Loading command: $command"
        # shellcheck source=/dev/null
        source "$command_file"
        return 0
    else
        log_error "Command '$command' not found"
        return 1
    fi
}

# Initialize configz if needed
init_configz_if_needed() {
    # Create basic structure if it doesn't exist
    if [[ ! -d "$CONFIG_SOURCE_DIR" ]]; then
        mkdir -p "$CONFIG_SOURCE_DIR"
        mkdir -p "$(dirname "$CONFIG_SOURCE_DIR")/backups"
        mkdir -p "$(dirname "$CONFIG_SOURCE_DIR")/cache"
        log_info "Created configz directory structure"
    fi
}

# Validate environment
validate_environment() {
    # Check required tools
    local missing_tools=()

    if ! command_exists "find"; then
        missing_tools+=("find")
    fi

    if ! command_exists "cp"; then
        missing_tools+=("cp")
    fi

    if [[ ${#missing_tools[@]} -gt 0 ]]; then
        log_error "Missing required tools: ${missing_tools[*]}"
        exit 1
    fi

    log_debug "Environment validation passed"
}

# Export global variables for subcommands
export_globals() {
    export SCRIPT_DIR CLI_DIR CONFIG_SOURCE_DIR TARGET_BASE_DIR
    export VERSION PROGRAM_NAME
    export VERBOSE DRY_RUN NO_BACKUP FORCE QUIET
    export RED GREEN YELLOW BLUE CYAN MAGENTA BOLD DIM NC
}

# =============================================================================
# ARGUMENT PARSING
# =============================================================================

parse_global_options() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -V|--version)
                show_version
                exit 0
                ;;
            -v|--verbose)
                VERBOSE=1
                shift
                ;;
            -q|--quiet)
                QUIET=1
                shift
                ;;
            -n|--dry-run)
                DRY_RUN=1
                shift
                ;;
            --no-backup)
                NO_BACKUP=1
                shift
                ;;
            -f|--force)
                FORCE=1
                shift
                ;;
            --config-dir)
                if [[ -n "${2:-}" ]]; then
                    TARGET_BASE_DIR="$2"
                    shift 2
                else
                    log_error "Option --config-dir requires a directory path"
                    exit 1
                fi
                ;;
            --config-dir=*)
                TARGET_BASE_DIR="${1#*=}"
                shift
                ;;
            -*)
                log_error "Unknown global option: $1"
                log_info "Use '$PROGRAM_NAME --help' for available options"
                exit 1
                ;;
            *)
                # Return remaining arguments
                return 0
                ;;
        esac
    done
}

# =============================================================================
# MAIN FUNCTION
# =============================================================================

main() {
    # Parse global options
    parse_global_options "$@"

    # Skip processed options
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help|-V|--version) exit 0 ;;
            -v|--verbose|-q|--quiet|-n|--dry-run|--no-backup|-f|--force) shift ;;
            --config-dir) shift 2 ;;
            --config-dir=*) shift ;;
            -*) shift ;;
            *) break ;;
        esac
    done

    # Export globals for subcommands
    export_globals

    # Validate environment
    validate_environment

    # Check if command provided
    if [[ $# -eq 0 ]]; then
        log_error "No command specified"
        echo
        show_help
        exit 1
    fi

    local command="$1"
    shift

    log_debug "Executing command: $command with args: $*"

    # Initialize configz structure
    init_configz_if_needed

    # Load and execute command
    if load_command "$command"; then
        # Call the command function (each command script defines a main function)
        if declare -f "${command}_main" >/dev/null; then
            "${command}_main" "$@"
        else
            log_error "Command '$command' is not properly implemented"
            exit 1
        fi
    else
        log_error "Unknown command: $command"
        log_info "Available commands: install, list, status, remove, backup, restore, search, update, init, info, migrate, doctor"
        log_info "Use '$PROGRAM_NAME --help' for more information"
        exit 1
    fi
}

# =============================================================================
# ENTRY POINT
# =============================================================================

# Only run main if script is executed directly (not sourced)
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
